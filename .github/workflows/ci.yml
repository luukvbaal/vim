name: GitHub CI

on:
  push:
    branches: ['**']
  pull_request:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for
  # pull requests or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-18.04

    env:
      CC: ${{ matrix.compiler }}
      TEST: test
      SRCDIR: ./src
      LEAK_CFLAGS: -DEXITFREE
      CFLAGS: -Wno-error=deprecated-declarations
      LOG_DIR: ${{ github.workspace }}/logs
      TERM: xterm
      DISPLAY: ':99'
      DEBIAN_FRONTEND: noninteractive

    strategy:
      fail-fast: false
      matrix:
        features: [huge]
        compiler: [gcc]
        extra: [none]

    steps:
      - name: Checkout repository from github
        uses: actions/checkout@v3

      - name: Install packages
        run: |
          PKGS=( \
            gettext \
            libgtk2.0-dev \
            desktop-file-utils \
            libtool-bin \
          )
          if ${{ matrix.features == 'huge' }}; then
            PKGS+=( \
              autoconf \
              lcov \
              libcanberra-dev \
              libperl-dev \
              python-dev \
              python3-dev \
              liblua5.3-dev \
              lua5.3 \
              ruby-dev \
              tcl-dev \
              cscope \
              libsodium-dev \
            )
          fi
          sudo apt update && sudo apt install -y "${PKGS[@]}"

      - name: Install gcc-11
        if:  matrix.compiler == 'gcc'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt install -y gcc-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
          sudo update-alternatives --set gcc /usr/bin/gcc-11

      - name: Install clang-14
        if: matrix.compiler == 'clang'
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          . /etc/lsb-release
          sudo add-apt-repository -y "deb http://apt.llvm.org/${DISTRIB_CODENAME}/ llvm-toolchain-${DISTRIB_CODENAME}-14 main"
          sudo apt install -y clang-14 llvm-14
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          sudo update-alternatives --set clang /usr/bin/clang-14
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-14 100
          sudo update-alternatives --install /usr/bin/asan_symbolize asan_symbolize /usr/bin/asan_symbolize-14 100

      - name: Set up environment
        run: |
          mkdir -p "${LOG_DIR}"
          mkdir -p "${HOME}/bin"
          echo "${HOME}/bin" >> $GITHUB_PATH
          (
          echo "LINUX_VERSION=$(uname -r)"
          echo "NPROC=$(getconf _NPROCESSORS_ONLN)"
          echo "SND_DUMMY_DIR=${HOME}/snd-dummy"
          echo "TMPDIR=${{ runner.temp }}"

          case "${{ matrix.features }}" in
          tiny|small)
            echo "TEST=testtiny"
            if ${{ contains(matrix.extra, 'nogui') }}; then
              echo "CONFOPT=--disable-gui"
            fi
            ;;
          normal)
            ;;
          huge)
            echo "TEST=scripttests test_libvterm"
            echo "CONFOPT=--enable-perlinterp --enable-pythoninterp --enable-python3interp --enable-rubyinterp --enable-luainterp --enable-tclinterp"
            ;;
          esac

          if ${{ matrix.coverage == true }}; then
            CFLAGS="$CFLAGS --coverage -DUSE_GCOV_FLUSH"
            echo "LDFLAGS=--coverage"
          fi
          if ${{ matrix.uchar == true }}; then
            CFLAGS="$CFLAGS -funsigned-char"
          fi
          if ${{ contains(matrix.extra, 'testgui') }}; then
            echo "TEST=-C src testgui"
          fi
          if ${{ contains(matrix.extra, 'unittests') }}; then
            echo "TEST=unittests"
          fi
          if ${{ contains(matrix.extra, 'asan') }}; then
            echo "SANITIZER_CFLAGS=-g -O1 -DABORT_ON_INTERNAL_ERROR -DEXITFREE -fsanitize-recover=all -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer"
            echo "ASAN_OPTIONS=print_stacktrace=1 log_path=${LOG_DIR}/asan"
            echo "UBSAN_OPTIONS=print_stacktrace=1 log_path=${LOG_DIR}/ubsan"
            echo "LSAN_OPTIONS=suppressions=${GITHUB_WORKSPACE}/src/testdir/lsan-suppress.txt"
          fi
          if ${{ contains(matrix.extra, 'vimtags') }}; then
            echo "TEST=-C runtime/doc vimtags VIMEXE=../../${SRCDIR}/vim"
          fi
          echo "CFLAGS=$CFLAGS"
          ) >> $GITHUB_ENV

      - name: Set up system
        run: |
          if [[ ${CC} = clang ]]; then
            # Use llvm-cov instead of gcov when compiler is clang.
            ln -fs /usr/bin/llvm-cov ${HOME}/bin/gcov
          fi
          # Setup lua5.3 manually since its package doesn't provide alternative.
          # https://bugs.launchpad.net/ubuntu/+source/lua5.3/+bug/1707212
          if [[ ${CONFOPT} =~ luainterp ]]; then
            sudo update-alternatives --install /usr/bin/lua lua /usr/bin/lua5.3 10
          fi
          sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=0
          sudo usermod -a -G audio "${USER}"
          sudo bash ci/setup-xvfb.sh

      - name: Cache snd-dummy
        uses: actions/cache@v3
        with:
          path: ${{ env.SND_DUMMY_DIR }}
          key: linux-${{ env.LINUX_VERSION }}-snd-dummy

      - name: Set up snd-dummy
        run: |
          if [[ ! -e ${SND_DUMMY_DIR}/snd-dummy.ko ]]; then
            bash ci/build-snd-dummy.sh
          fi
          cd "${SND_DUMMY_DIR}"
          sudo insmod soundcore.ko
          sudo insmod snd.ko
          sudo insmod snd-pcm.ko
          sudo insmod snd-dummy.ko

      - name: Check autoconf
        if: contains(matrix.extra, 'unittests')
        run: |
          make -C src autoconf

      - name: Set up shadow dir
        if: matrix.shadow
        run: |
          make -C src shadow
          echo "SRCDIR=${{ matrix.shadow }}" >> $GITHUB_ENV
          echo "SHADOWOPT=-C ${{ matrix.shadow }}" >> $GITHUB_ENV

      - name: Configure
        run: |
          ./configure --with-features=${{ matrix.features }} ${CONFOPT} --enable-fail-if-missing
          # Append various warning flags to CFLAGS.
          sed -i -f ci/config.mk.sed ${SRCDIR}/auto/config.mk
          sed -i -f ci/config.mk.${CC}.sed ${SRCDIR}/auto/config.mk
          if [[ ${CC} = clang ]]; then
            # Suppress some warnings produced by clang 12 and later.
            sed -i -f ci/config.mk.clang-12.sed ${SRCDIR}/auto/config.mk
          fi

      - name: Build
        if: (!contains(matrix.extra, 'unittests'))
        run: |
          make ${SHADOWOPT} -j${NPROC}

      - name: Check version
        if: (!contains(matrix.extra, 'unittests'))
        run: |
          "${SRCDIR}"/vim --version
          "${SRCDIR}"/vim -u NONE -i NONE --not-a-term -esNX -V1 -S ci/if_ver-1.vim -c quit
          "${SRCDIR}"/vim -u NONE -i NONE --not-a-term -esNX -V1 -S ci/if_ver-2.vim -c quit

      - name: Test
        timeout-minutes: 20
        run: |
          do_test() { sg audio "sg $(id -gn) '$*'"; }
          do_test make ${SHADOWOPT} ${TEST}

      # - name: Coveralls
      #   if: matrix.coverage && github.event_name != 'pull_request'
      #   env:
      #     COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      #     COVERALLS_PARALLEL: true
      #     TRAVIS_JOB_ID: ${{ github.run_id }}
      #   run: |
      #     sudo apt-get install -y python3-setuptools python3-wheel
      #     sudo -H pip3 install pip -U
      #     # needed for https support for coveralls building cffi only works with gcc, not with clang
      #     CC=gcc pip3 install --user cpp-coveralls pyopenssl ndg-httpsclient pyasn1
      #     ~/.local/bin/coveralls -b "${SRCDIR}" -x .xs -e "${SRCDIR}"/if_perl.c -e "${SRCDIR}"/xxd -e "${SRCDIR}"/libvterm --encodings utf-8

      - name: Generate gcov files
        if: matrix.coverage
        run: |
          cd "${SRCDIR}"
          find . -type f -name '*.gcno' -exec gcov -pb {} + || true

      - name: Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v3.1.0
        with:
          flags: linux,${{ matrix.features }}-${{ matrix.compiler }}-${{ matrix.extra }}

      - name: ASan logs
        if: contains(matrix.extra, 'asan') && !cancelled()
        run: |
          for f in $(grep -lR '#[[:digit:]]* *0x[[:xdigit:]]*' "${LOG_DIR}"); do
            asan_symbolize -l "$f"
            false # in order to fail a job
          done

  # coveralls:
  #   runs-on: ubuntu-18.04
  #
  #   needs: linux
  #   if: always() && github.event_name != 'pull_request'
  #
  #   steps:
  #     - name: Parallel finished
  #       env:
  #         COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
  #       run: |
  #         curl -k "https://coveralls.io/webhook?repo_token=${COVERALLS_REPO_TOKEN}" -d "payload[build_num]=${GITHUB_RUN_ID}&payload[status]=done"

